# -*- coding: utf-8 -*-
"""Aquisição e visualização.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMGfvWOKHRErkf94fkhUMOgKjjhF1iBu
"""

pip install matplotlib

"""# Nova seção

# Nova seção
"""

pip install pandas

import pandas as pd
import matplotlib.pyplot as plt

dados=pd.read_csv('/content/A203512189_28_143_208.csv',
                  encoding='ISO-8859-1',
                  skiprows=3,
                  sep=';',
                  skipfooter=12,
                  thousands='.',
                  decimal=',')

dados.head()
dados.tail()
dados.info()
pd.options.display.float_format='{:.2f}'.format
dados.mean()

dados["2008/Ago"]

dados["2008/Ago"].mean()

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

axis = dados.plot(x="Unidade da Federação", y="2021/Dez", kind="barh", figsize=(9,6))
axis.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:,.2f}"))
plt.xticks(rotation=45)

plt.title("Valor por unidade da federação")
plt.show()

dados[["2008/Ago", "2008/Set"]].head()

dados.columns

colunas_usaveis = dados.mean().index.tolist()
colunas_usaveis.insert(0, "Unidade da Federação")
colunas_usaveis[:5]

dados_usaveis = dados[colunas_usaveis]
dados_usaveis.head()

dados_usaveis = dados_usaveis.set_index("Unidade da Federação")
dados_usaveis.head()

dados_usaveis["2019/Ago"].head()

dados_usaveis.loc["12 Acre"]

dados_usaveis.iloc[1]

dados_usaveis.plot(figsize=(14,6))

dados_usaveis.T.head()

dados_usaveis.T.plot(figsize=(12,6))

dados_usaveis.tail()

dados_usaveis=dados_usaveis.drop("Total", axis=1)
dados_usaveis.head()

dados_usaveis.T.plot(figsize=(12,6))
plt.xlabel("Mês / Ano")
plt.ylabel("Valores R$")
plt.title("Gráfico de Investimentos por Estados")
plt.legend(bbox_to_anchor=(1.0, 1.1), borderpad=1)
plt.show()

dados_usaveis.head()

dados_usaveis.T.columns

dados_usaveis.T.columns[:5]

dados_usaveis[:5]

dados_usaveis[:7].T.plot(figsize=(10,6))

dados_usaveis.sample()

dados_usaveis.sample(n=7)

dados_usaveis.sample(7).T.plot(figsize=(10,6))

import numpy as np

np.random.seed(524387)
dados_usaveis.sample(n=7)

dados_usaveis.sample(n=7).T.plot(figsize=(10,6))

dados_usaveis["Total"]=dados_usaveis.sum(axis=1)
dados_usaveis.head()

dados_usaveis.head()

ordenados_por_total = dados_usaveis.sort_values(by="Total", ascending=False)
ordenados_por_total = ordenados_por_total.drop("Total", axis=1)
ordenados_por_total.head()

ordenados_por_total.head(5).T.plot(figsize=(10,6))

ordenados_por_total=ordenados_por_total/1_000_000

axis=ordenados_por_total.head(5).T.plot(figsize=(10,6))
axis.set_ylabel("Gastos Aprovados em Milhões de Reais")
axis.set_xlabel("Mês")

meses_filtrados=ordenados_por_total.columns[47:]
ordenados_por_total[meses_filtrados].head(3).T.plot(figsize=(10,6))
axis.set_ylabel("gasto aprovado em milhões de reais")
axis.set_xlabel("mês")

def plota_gastos_por_mes(dados, figsize=(10,6)):
  axis=dados.T.plot(figsize=figsize)
  axis.set_ylabel("Gastos Aprovados em Milhões de Reais")
  axis.set_xlabel("Mês")

plota_gastos_por_mes(ordenados_por_total[meses_filtrados].head(3))

plota_gastos_por_mes(ordenados_por_total[meses_filtrados].head(3))
plt.ylim(0, 600)

plota_gastos_por_mes(ordenados_por_total[ordenados_por_total.columns[45:70]].head(3))
plt.ylim(0, 440)

plota_gastos_por_mes(ordenados_por_total[ordenados_por_total.columns[-60:]].head(3))
plt.ylim(0, 650)

plota_gastos_por_mes(ordenados_por_total[ordenados_por_total.columns[0:]].head())
plt.ylim(0, 650)

plota_gastos_por_mes(ordenados_por_total[ordenados_por_total.columns[-72:]].head())
plt.ylim(0, 650)
plt.xticks([0, 12, 24, 36, 48, 60, 72], [2015, 2016, 2017, 2018, 2019, 2020, 2021])
plt.show()

plota_gastos_por_mes(ordenados_por_total[ordenados_por_total.columns[-72:]].head())
plt.ylim(0, 650)
plt.xticks([0, 12, 24, 36, 48, 60, 72], [2015, 2016, 2017, 2018, 2019, 2020, 2021])
plt.grid(True, linestyle='--', linewidth=0.5, color="gray")
plt.show()

mes_mais_recente = ordenados_por_total.columns[-1]
mes_mais_recente

gastos_do_mais_recente = ordenados_por_total[mes_mais_recente]
gastos_do_mais_recente.head()

gastos_do_mais_recente.plot()

gastos_do_mais_recente.plot(kind="pie")

gastos_do_mais_recente.sample(frac=1).plot(kind="pie")

gastos_do_mais_recente

gastos_do_mais_recente.loc["41 Paraná"]

gastos_do_mais_recente/gastos_do_mais_recente.loc["41 Paraná"]

tabela_de_comparacao = gastos_do_mais_recente/gastos_do_mais_recente.loc["41 Paraná"]
tabela_de_comparacao.head()

tabela_de_comparacao.plot(kind="pie")

tabela_de_comparacao.plot(kind="bar")

tabela_de_comparacao.plot(kind="barh")

tabela_de_comparacao.plot(kind="bar")

tabela_de_comparacao = tabela_de_comparacao.sort_values(ascending=False)
tabela_de_comparacao.plot(kind="bar")

tabela_de_comparacao.describe()

tabela_de_comparacao = tabela_de_comparacao.sort_values(ascending=False)
tabela_de_comparacao.plot(kind="bar")

ax = tabela_de_comparacao.plot(kind="bar")
valor_limite = 1
ax.axhline(valor_limite, color='red', linestyle='--')
ax.set_ylabel("Valor de Comparação")

tabela_de_comparacao.plot(kind="bar")

limite = 1
cor_acima = 'red'
cor_abaixo = 'green'

cores = np.where(tabela_de_comparacao >= limite, cor_acima, cor_abaixo)
ax = tabela_de_comparacao.plot(kind='bar', x='Unidade da Federação', y='Valor', color=cores)

ax.axhline(limite, color='blue', linestyle='--')

plt.show()

ibge_estimativa = pd.read_excel("/content/POP2021_20221212.xls")
ibge_estimativa.head()

ibge_estimativa = pd.read_excel("https://github.com/aloisiok1/visualizacao_de_dados/raw/main/Dados_do_SUS/POP2021_20221212.xls")
ibge_estimativa.head()

dados_da_populacao = """
Posição	Unidade federativa	"População
(Censo de 2010)[2]"	"População
(Prévia 2022)"	Mudança	% da pop. total	"País comparável
(habitantes)"
1	São Paulo	41 262 199	46 024 937	0.115	22,2%	Espanha (46 754 778)
2	Minas Gerais	19 597 330	20 732 660	0.058	10,0%	Burquina Fasso (20 903 273)
3	Rio de Janeiro	15 989 929	16 615 526	0.039	8,0%	Camboja (16 718 965)
4	Bahia	14 016 906	14 659 023	0.046	7,1%	Zimbabwe (14 862 924)
5	Paraná	10 444 526	11 835 379	0.133	5,7%	Tunísia (11 818 619)
6	Rio Grande do Sul	10 693 929	11 088 065	0.037	5,3%	Cuba (11 326 616)
7	Pernambuco	8 796 448	9 051 113	0.029	4,4%	Áustria (9 006 398)
8	Ceará	8 452 381	8 936 431	0.057	4,3%	Papua-Nova Guiné (8 947 024)
9	Pará	7 581 051	8 442 962	0.114	4,1%	Suíça (8 654 622)
10	Santa Catarina	6 248 436	7 762 154	0.242	3,7%	Paraguai (7 132 538)
11	Goiás	6 003 788	6 950 976	0.158	3,3%	Bulgária (6 948 445)
12	Maranhão	6 574 789	6 800 605	0.034	3,3%	Bulgária (6 948 445)
13	Espírito Santo	3 514 952	4 108 508	0.131	1,9%	Geórgia (3 989 167)
14	Paraíba	3 766 528	4 030 961	0.07	1,9%	Geórgia (3 989 167)
15	Amazonas	3 483 985	3 952 262	0.134	1,9%	Geórgia (3 989 167)
16	Mato Grosso	3 035 122	3 784 239	0.247	1,8%	Geórgia (3 989 167)
17	Rio Grande do Norte	3 168 027	3 303 953	0.043	1,6%	Uruguai (3 473 730)
18	Piauí	3 118 360	3 270 174	0.049	1,6%	Bósnia e Herzegovina (3 280 819)
19	Alagoas	3 120 494	3 125 254	0.002	1,5%	Mónaco (3 278 290)
20	Distrito Federal	2 570 160	2 923 369	0.137	1,4%	Armênia (2 963 243)
21	Mato Grosso do Sul	2 449 024	2 833 742	0.157	1,4%	Albânia (2 877 797)
22	Sergipe	2 068 017	2 211 868	0.07	1,1%	Gabão (2 225 734)
23	Rondônia	1 562 409	1 616 379	0.035	0,8%	Bahrein (1 701 575)
24	Tocantins	1 383 445	1 584 306	0.145	0,8%	Guiné Equatorial (1 402 985)
25	Acre	733 559	829 780	0.131	0,4%	Comores (869 601)
26	Amapá	669 526	774 268	0.156	0,4%	Guiné (786 552)
27	Roraima	450 479	634 805	0.409	0,3%	Montenegro (649 335)"""
#fonte - https://pt.wikipedia.org/wiki/Lista_de_unidades_federativas_do_Brasil_por_popula%C3%A7%C3%A3o
#fonte indireta - ibge

from io import StringIO
dados_da_populacao_io = StringIO(dados_da_populacao)

populacao = pd.read_csv(dados_da_populacao_io, sep="\t")
populacao = populacao.dropna()
populacao.head()

URL = 'https://pt.wikipedia.org/wiki/Lista_de_unidades_federativas_do_Brasil_por_popula%C3%A7%C3%A3o'
dfs = pd.read_html(URL)
dfs[0].head()

populacao.columns = ["posicao", "uf", "populacao_2010", "populacao", "mudanca", "porcentagem", "pais_comparavel"]
populacao["populacao"] = populacao["populacao"].str.replace(" ","").astype(int)
populacao.head()

populacao.info()

populacao.describe()

populacao = populacao[["uf", "populacao"]]
populacao.head()

display(gastos_do_mais_recente.head())
display(populacao.head())

populacao.join(gastos_do_mais_recente)

gastos_do_mais_recente.index = gastos_do_mais_recente.index.str[3:]
gastos_do_mais_recente.head()

populacao.join(gastos_do_mais_recente)

populacao = populacao.set_index("uf")
populacao.head()

populacao.join(gastos_do_mais_recente)

gastos_e_populacao = populacao.join(gastos_do_mais_recente)
gastos_e_populacao.head()

ultima_coluna = gastos_e_populacao.columns[-1]
gastos_e_populacao["gastos"] = gastos_e_populacao[ultima_coluna] *1000000
gastos_e_populacao.plot()

gastos_e_populacao.loc[["Ceará", "Pará"]]

gastos_e_populacao["gastos_por_habitante"] = gastos_e_populacao["gastos"]/gastos_e_populacao["populacao"]
gastos_e_populacao.head()

gastos_e_populacao.plot(kind="bar")

gastos_e_populacao["gastos_por_habitante"].plot(kind="bar")

#ordenar do maior gasto por habitante para o menor
#colocar a médias dos gastos com uma linha horizontal - anotação
#ordenar por npumero de habitante

gastos_sorted = gastos_e_populacao.sort_values("gastos_por_habitante")

# Set the figure size
plt.figure(figsize=(12, 6))

# Generate the bar plot
plt.bar(gastos_sorted.index, gastos_sorted["gastos_por_habitante"])

# Set the labels and title
plt.xlabel("Cidades")
plt.ylabel("Gastos por Habitante")
plt.title("Gastos por Habitante em cada Cidade (Ordenado Crescente)")

# Rotate x-axis labels if needed
plt.xticks(rotation=90)

# Display the plot
plt.show()

# Calculate the average expenditure
average_expenditure = gastos_e_populacao["gastos_por_habitante"].mean()

# Set the figure size
plt.figure(figsize=(10, 6))

# Generate the bar plot
plt.bar(gastos_e_populacao.index, gastos_e_populacao["gastos_por_habitante"])


# Set the labels and title
plt.xlabel("Cidades")
plt.ylabel("Gastos")
plt.title("Gastos por Habitante em cada Cidade")

# Add a horizontal line for the average expenditure
plt.axhline(average_expenditure, color='r', linestyle='--', label='Média de Gastos')

# Rotate x-axis labels if needed
plt.xticks(rotation=90)

# Add a legend
plt.legend()

# Display the plot
plt.show()

import seaborn as sns

sns.scatterplot(data = gastos_e_populacao/1000000, x="populacao", y="gastos")

plt.figure(figsize=(7,7))
sns.scatterplot(data = gastos_e_populacao/1000000, x="populacao", y="gastos")

plt.figure(figsize=(7,7))
sns.scatterplot(data = gastos_e_populacao/1000000, x="populacao", y="gastos_por_habitante")

#jeito mais dificil de unis o ultimo e o pnultimo mes
#penultimo_mes = ordenados_por_total.columns[-2]
#penultimo_mes

#penultimo_mes = ordenados_por_total[penultimo_mes]
#penultimo_mes.head()

#ultimo_mes = gastos_do_mais_recente
#ultimo_mes.head()

# Remover a parte do código do índice em "ultimo_mes"
#ultimo_mes.index = ultimo_mes.index.str.split().str[1]

# Remover a parte do código do índice em "penultimo_mes"
#penultimo_mes.index = penultimo_mes.index.str.split().str[1]

# Redefinir os índices
#ultimo_mes = ultimo_mes.reset_index(drop=True)
#penultimo_mes = penultimo_mes.reset_index(drop=True)

# Unir os DataFrames lado a lado
#unidos = pd.concat([ultimo_mes, penultimo_mes], axis=1)

# Exibir o resultado
#unidos.head()

#jeito mais facil de unir o ultimo e o penultimo mes
#penultimo_mes = ordenados_por_total.columns[-2:]
#penultimo_mes

#penultimo_mes = ordenados_por_total[penultimo_mes]
#penultimo_mes.head()

ordenados_por_total.index = ordenados_por_total.index.str[3:].str.strip()
ordenados_por_total

def insere_gastos_e_gasto_por_habitante(ordenados_por_total, gastos_e_populacao, mes):
  gastos = ordenados_por_total[mes]
  gastos_e_populacao[f"gastos_{mes}"] = gastos * 1000000
  gastos_e_populacao[f"gastos_por_habitante_{mes}"] = gastos_e_populacao[f"gastos_{mes}"] / gastos_e_populacao["populacao"]
  return gastos_e_populacao

gastos_e_populacao = insere_gastos_e_gasto_por_habitante(ordenados_por_total, gastos_e_populacao, ordenados_por_total.columns[-1])
gastos_e_populacao.head()

gastos_e_populacao = insere_gastos_e_gasto_por_habitante(ordenados_por_total, gastos_e_populacao, ordenados_por_total.columns[-2])
gastos_e_populacao = insere_gastos_e_gasto_por_habitante(ordenados_por_total, gastos_e_populacao, ordenados_por_total.columns[-3])
gastos_e_populacao.head()

plt.figure(figsize = (7 ,7))
sns.scatterplot(data = gastos_e_populacao, x = "populacao", y = "gastos_2021/Dez")
sns.scatterplot(data = gastos_e_populacao, x = "populacao", y = "gastos_2021/Nov")
sns.scatterplot(data = gastos_e_populacao, x = "populacao", y = "gastos_2021/Out")

#Legenda, diminuir marcações e arrumar o gráfico
#explorar esse gráfico e levantar algumas hipóteses
#comparar os últimos 12 meses com os 12 meses anteriores. 
  #Somar os 123 ultimos meses em uma única coluna e somar os meses do mês anterior tbem

ordenados_por_total.loc["São Paulo"]

sns.scatterplot(x = ordenados_por_total.columns, y = ordenados_por_total.loc["São Paulo"])

ordenados_por_total.T

mensal = ordenados_por_total.T
mensal.head()

sns.scatterplot(data = mensal, x = mensal.index, y = "São Paulo")

plt.figure(figsize=(10,6))
sns.scatterplot(data = mensal, x = mensal.index, y = "São Paulo")

plt.figure(figsize=(10,6))
sns.lineplot(data = mensal, x = mensal.index, y = "São Paulo")

plt.figure(figsize=(10,6))
axis = sns.lineplot(data = mensal, x = mensal.index, y = "São Paulo")
plt.xticks(rotation = 30)
plt.ylim(0,600)
axis.xaxis.set_major_locator(ticker.IndexLocator(base=12, offset=11))
plt.grid(linestyle="--")
plt.show